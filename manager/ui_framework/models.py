"""
Defines the Django models for this app.

For more information see:
https://docs.djangoproject.com/en/2.2/topics/db/models/
"""
from django.contrib.postgres.fields import JSONField
from django.db import models
from django.core.files.storage import FileSystemStorage
import os
from django.conf import settings


class BaseModel(models.Model):
    """Base Model for the models of this app."""

    class Meta:
        """Define attributes of the Meta class."""

        abstract = True
        """Make this an abstract class in order to be used as an enhanced base model"""

    creation_timestamp = models.DateTimeField(
        auto_now_add=True, editable=False, verbose_name="Creation time"
    )
    """Creation timestamp, autogenerated upon creation"""

    update_timestamp = models.DateTimeField(
        auto_now=True, editable=False, verbose_name="Last Updated"
    )
    """Update timestamp, autogenerated upon creation and autoupdated on every update"""


class OverwriteStorage(FileSystemStorage):
    def get_available_name(self, name, max_length):
        """Returns a filename that's free on the target storage system, and available for new content to be written to.

        Found at http://djangosnippets.org/snippets/976/

        This file storage solves overwrite on upload problem. Another
        proposed solution was to override the save method on the model
        like so (from https://code.djangoproject.com/ticket/11663):

        def save(self, *args, **kwargs):
            try:
                this = MyModelName.objects.get(id=self.id)
                if this.MyImageFieldName != self.MyImageFieldName:
                    this.MyImageFieldName.delete()
            except: pass
            super(MyModelName, self).save(*args, **kwargs)

        Parameters
        ----------
        name : string
            name of the file
        max_length : int
            maximum length of the file (currently unused but needed to match the expected API)

        Returns
        -------
        string
            The name of the file
        """
        # If the filename already exists, remove it as if it was a true file system
        if self.exists(name):
            os.remove(os.path.join(settings.MEDIA_ROOT, name))
        return name


class View(BaseModel):
    """View Model."""

    name = models.CharField(max_length=20)
    """The name of the View. e.g 'My View'"""

    data = JSONField(null=True, blank=True)
    """The data that constitutes the View, stored as a JSON"""

    thumbnail = models.ImageField(
        upload_to="thumbnails/",
        storage=OverwriteStorage(),
        default="thumbnails/default.png",
    )
    """A reference to the image thumbnail of the view"""

    def __str__(self):
        """Redefine how objects of this class are transformed to string."""
        return self.name


class Workspace(BaseModel):
    """Workspace Model."""

    name = models.CharField(max_length=20)
    """The name of the Workspace. e.g 'My Workspace'"""

    views = models.ManyToManyField(
        View, through="WorkspaceView", related_name="workspaces"
    )

    def __str__(self):
        """Redefine how objects of this class are transformed to string."""
        return self.name

    def get_sorted_views(self):
        """Return the views sorted by the sort_value of their corresponding WorkView.

        Returns
        -------
        list:
            List of View objects associated to this Workspace
        """
        return [wv.view for wv in self.workspace_views.all()]

    @staticmethod
    def has_read_permission(request):
        """Check if the given user has read permissions over WOrkspace objects

        Parameters
        ----------
        request : object
            The request object, with the user

        Returns
        -------
        bool
            True if request.user has read permissions over Workspace objects, False if not
        """
        return request.user.has_perm("ui_framework.view_workspace")


class WorkspaceView(BaseModel):
    """WorkspaceView Model, that relates a Works with a View."""

    workspace = models.ForeignKey(
        Workspace, on_delete=models.CASCADE, related_name="workspace_views"
    )
    """The corresponding Workspace"""

    view = models.ForeignKey(
        View, on_delete=models.CASCADE, related_name="workspace_views"
    )
    """The corresponding View"""

    view_name = models.CharField(max_length=20, blank=True)
    """The custom name for the View within the Workspace"""

    sort_value = models.PositiveIntegerField(default=0, blank=False, null=False)
    """Order of the View within the Workspace."""

    class Meta:
        """Define attributes of the Meta class."""

        unique_together = ("workspace", "view")
        """Forbid duplicated pairs of Workspace and View."""

        ordering = ("sort_value",)
        """Set ordering according to 'sort_value' field."""

    def __str__(self):
        """Redefine how objects of this class are transformed to string."""
        if self.view_name and self.view_name != "":
            return "{}: {} - {}".format(
                self.view_name, self.workspace.name, self.view.name
            )
        else:
            return "{} - {}".format(self.workspace.name, self.view.name)
